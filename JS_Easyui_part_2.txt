


|=========================================================================================================|
|																										  |
|																										  |
|																										  |
|																										  |
|===============================  					js  技巧	     	   ===============================|
|																										  |
|																										  |
|																										  |
|																										  |
|=========================================================================================================|









//**********日期时间设置 start**********

/**
 * 获取指定时间的间隔日期
 * dataTemp {String} "2021-03-18" 指定日期
 * days {Number} 5 指定日期后的第5日
 */

function getNewDay(dateTemp,days){
    var d=new Date(dateTemp);
    d.setDate(d.getDate()+days);
    var m=d.getMonth()+1;
    return d.getFullYear()+'-'+m+'-'+d.getDate();
}	

/* 不兼容火狐 */
function getNewDay(dateTemp, days) {
    var dateTemp = dateTemp.split("-");
    var nDate = new Date(dateTemp[1] + '-' + dateTemp[2] + '-' + dateTemp[0]); //转换为MM-DD-YYYY格式
    var millSeconds = Math.abs(nDate) + (days * 24 * 60 * 60 * 1000);
    var rDate = new Date(millSeconds);
    var year = rDate.getFullYear();
    var month = rDate.getMonth() + 1;
    if (month < 10) month = "0" + month;
    var date = rDate.getDate();
    if (date < 10) date = "0" + date;
    return (year + "-" + month + "-" + date);
}


// 时间戳转换成 yyyy-MM-dd HH-mm-ss
function formatDateTime(inputTime) {  
    var date = new Date(inputTime);
    var y = date.getFullYear();  
    var m = date.getMonth() + 1;  
    m = m < 10 ? ('0' + m) : m;  
    var d = date.getDate();  
    d = d < 10 ? ('0' + d) : d;  
    var h = date.getHours();
    h = h < 10 ? ('0' + h) : h;
    var minute = date.getMinutes();
    var second = date.getSeconds();
    minute = minute < 10 ? ('0' + minute) : minute;  
    second = second < 10 ? ('0' + second) : second; 
    return y + '-' + m + '-' + d+' '+h+':'+minute+':'+second;  
};

// 获取当前日期
function getCurrentDate() {
    var date = new Date();
    var seperator1 = "-";
    var seperator2 = ":";
    var month = date.getMonth() + 1;
    var strDate = date.getDate();
    if (month >= 1 && month <= 9) {
        month = "0" + month;
    }
    if (strDate >= 0 && strDate <= 9) {
        strDate = "0" + strDate;
    }
    var currentdate = date.getFullYear() + seperator1 + month + seperator1 + strDate;
    return currentdate;
}


// 特殊时间格式化
formateDate: function(date){
	var arr=date.split("T");
	var d=arr[0];  
	var darr = d.split('-');
	var t=arr[1];
	var tarr = t.split('.000');
	var marr = tarr[0].split(':');
	var y = parseInt(darr[0]);
	var m = parseInt(darr[1]);
	m = m < 10 ? ('0' + m) : m;
	var d = parseInt(darr[2]);
	d = d < 10 ? ('0' + d) : d;
	var h = parseInt(marr[0]) + 8;
	h = h < 10 ? ('0' + h) : h;
	var minute = parseInt(marr[1]);
	minute = minute < 10 ? ('0' + minute) : minute;
	var secound = parseInt(marr[2]);
	secound = secound < 10 ? ('0' + secound) : secound;
	return y +'-'+ m +'-'+ d +' '+ h +':'+ minute +':'+ secound;
},



/* 获取当前时间的时间戳 -- 毫秒（ms） */
new Date().getTime();
Date.now();

//**********日期时间设置 end**********









//**********深拷贝 start**********

// 复制对象的结构和属性，而非指针
a: 递归递归去复制所有层级属性。
	function deepClone(obj){
		let objClone = Array.isArray(obj)?[]:{};
		if(obj && typeof obj==="object"){
			for(key in obj){
				if(obj.hasOwnProperty(key)){
					//判断ojb子元素是否为对象，如果是，递归复制
					if(obj[key]&&typeof obj[key] ==="object"){
						objClone[key] = deepClone(obj[key]);
					}else{
						//如果不是，简单复制
						objClone[key] = obj[key];
					}
				}
			}
		}
		return objClone;
	}    
	
b: JSON对象的parse和stringify
	JSON.parse(JSON.stringify(obj));

c: JQ的extend方法
	b=$.extend(true,[],obj);
	
//**********深拷贝 end**********	







//**********动态加载 js 文件 start**********	

(function(){
	var srcript, 
		srcripts = document.getElementsByTagName('srcript')[0];
	function load(url){
		srcript = document.createElement('srcript');
		srcript.async = true;
		srcript.src = url;
		srcripts.parentNode.insertBefore(srcript, srcripts);
	}
	
	load('//api.google.com/js/plusone1.js');
	load('//api.google.com/js/plusone2.js');
	load('//api.google.com/js/plusone3.js');
}())

// 动态创建js
function loadjs(script_filename) {
    var script = document.createElement('script');
    script.setAttribute('type', 'text/javascript');
    script.setAttribute('src', script_filename);
    script.setAttribute('id', 'coolshell_script_id');
 
    script_id = document.getElementById('coolshell_script_id');
    if(script_id){
        document.getElementsByTagName('head')[0].removeChild(script_id);
    }
    document.getElementsByTagName('head')[0].appendChild(script);
}

//**********动态加载 js 文件 end**********	





//**********postMessage通信 js 文件 start**********	

1、父页面向子 iframe 传值

/**
 * 父节点数据传递：
 * 
 * msgObj {Object} 需要传递的对象
 * url {String} 可选参数 
 */
	var frame = document.getElementById('faIframe');
	frame.contentWindow.postMessage(msgObj, url);
	
/**
 * 子节点接收数据：
 *
 * message 监听 message 对象，获取父节点推送消息
 */
	window.addEventListener('message', function(e){
		var data = e.data;
		...
	});
	
2、子 iframe 向父页面传值

/**
 * 子节点数据传递：
 * 
 * msgObj {Object} 需要传递的对象
 * url {String} 可选参数 
 */
	window.parent.postMessage(msgObj, url);
	
/**
 * 父节点接收数据：
 *
 * message 监听 message 对象，获取子节点推送消息
 */
	window.addEventListener('message', function(e){
		var data = e.data;
		...
	});
	
//**********postMessage通信 js 文件 end**********	








//**********下载图片地址和图片名  start**********	

function downloadIamge(imgsrc, name) {
	var image = new Image();
	image.setAttribute("crossOrigin", "anonymous");	 		// 解决跨域 Canvas 污染问题
	image.onload = function () {
		var canvas = document.createElement("canvas");
		canvas.width = image.width;
		canvas.height = image.height;
		var context = canvas.getContext("2d");
		context.drawImage(image, 0, 0, image.width, image.height);
		var url = canvas.toDataURL("image/png"); 			//得到图片的base64编码数据
		var a = document.createElement("a"); 				// 生成一个a元素
		var event = new MouseEvent("click"); 				// 创建一个单击事件
		a.download = name || "photo"; 						// 设置图片名称
		a.href = url; 										// 将生成的URL设置为a.href属性
		a.dispatchEvent(event); 							// 触发a的单击事件
	};
	image.src = imgsrc;
}


/**
 * 文件下载
 * fileName {String} 下载的文件名 	
 * url {String}  文件下载地址，链接
 */
function download(filename, url){
	let xhr = new XMLHttpRequest();
	xhr.open('GET', url, true);
	xhr.responseType = 'blob';
	xhr.onload = ()=> {
		if (xhr.status === 200) {
			let blob = xhr.response;
			if (window.navigator.msSaveOrOpenBlob) {
				navigator.msSaveBlob(blob, filename);
			} else {
				let link = document.createElement('a');
				let body = document.querySelector('body');
				link.href = window.URL.createObjectURL(blob);
				link.download = filename;
				link.style.display = 'none';
				body.appendChild(link);
				link.click();
				body.removeChild(link);
				window.URL.revokeObjectURL(link.href);
			};
		}
	};
	xhr.send();
}


//**********下载图片地址和图片名  end**********	






//**********节流|防抖  start**********	

// 节流 | 时间间隔内会执行一次 
var isUsed = false;
if(!isUsed) {
	doSomething();			// 第一次执行代码
	setTimeout(() => {
		isUsed = false; 	// 状态重置
	}, 400);
}

// 防抖 | 最后一次执行
var timer = null;
if(timer){
	clearTimer(timer);
	timer = null;
	timer = setTimeout(() => {
		doSomething();
	}, 400);
}else{
	timer = setTimeout(() => {
		doSomething();
	}, 400);
}

//**********节流|防抖  end**********





//**********键盘监听事件  start**********	

document.onkeydown=function(event){
    var e = event || window.event || arguments.callee.caller.arguments[0];
	if(e && e.keyCode==13){ // enter 键
		doSomething();
	}
	if(e && e.keyCode==27){ // 按 Esc 
        doSomething();
	}
	if(e && e.keyCode==113){ // 按 F2 
        doSomething();
	}            
}; 

//**********键盘监听事件  end**********	






//**********js 判断页面加载完成  start**********

document.onreadystatechange = this.isOnReady;
isOnReady() {
  if (document.readyState == "complete") {
	doSomething()....
  }
},

// js 判断页面加载完成 -- VUE
this.$nextTick(() => {
	doSomething()....
});

//**********js 判断页面加载完成  end**********






//**********数组方法 start**********

var array = [a,b,c,d,e,f,g];
array.join(',');  		// "a,b,c,d,e,f,g"
result.split(','); 		// [a,b,c,d,e,f,g]

// indexOf()函数 返回在 String 对象中第一次出现子字符串的字符位置。当未找到返回值时则返回 -1
var str = "hello world!";
var a=str.indexOf("hello");		// a=0;
var b=str.indexOf("Hello");		// b=-1;
var c=str.indexOf("world");		// c=6;
	
//**********数组方法 end**********







//**********类、构造函数  start**********

// 构造函数继承
function fn(){
	this.name = "hello ";
}

function gz(){
	fn.call(this);
}

var test1 = new gz();
test1.name += "world";
console.log(test1.name);

// 原型链继承
function yxl(){}
yxl.prototype = new fn();

var test2 = new yxl();
test2.name += "world";
console.log(test2.name);


// JS 类的概念
class Point {
	constructor (x, y) {
		this.x =x;
		this.y =y;
	}
	toString () {
		return `( ${this.x}, ${this.y} )`;
	}
	toValue () {
		return this.x+this.y;
	}
}

var p = new Point(1,2);
p.toString();				//"(1,2)"
p.toValue();				//3

<=>

function Point(x,y) {
	this.x = x;
	this.y = y;
}
Point.prototype.toString() = function() {
	return `( ${this.x}, ${this.y} )`;
}
Point.prototype.toValue() = function() {
	return this.x+this.y;
}

//**********类、构造函数  end**********









//**********Math方法  start**********

// 一种保存两位小数的方式
Math.floor(numObj*100)/100


//**********Math方法  end**********








//**********阶乘计算  start**********

var mult = function(){     
	console.log( '开始计算乘积' );     
	var a = 1;     
	for ( var i = 0, l = arguments.length; i < l; i++ ){         
		a = a * arguments[i];      
	}      
	return a; 
};
mult(2,3,5);

//**********阶乘计算  end**********









//**********金额展示3位数字用 , 间隔  start**********

filters: {
	thousandBit(value) {
	  return value ? String(value).replace(/\B(?=(\d{3})+(?!\d))/g, ",") : 0;
	}
},

//**********金额展示3位数字用 , 间隔  end**********








//**********判断是 Array 和 Object 数组或JOSN对象  start**********

Object.prototype.toString.call(value) === "[object Array]"		// 判断是否数组
Object.prototype.toString.call(value) === "[object Object]"		// 判断是否JSON
// 延伸
Object.prototype.toString.call(window) === "[object Window]"	// Window 对象
Object.prototype.toString.call(Window) === "[object Function]"	// Window 为Function 对象

//**********判断是 Array 和 Object 数组或JOSN对象  end**********








		
	

//**********复制文本到剪切板 - js兼容安卓和IOS的 start**********

function copy(message) {
	var input = document.createElement("input");
	input.value = message;
	document.body.appendChild(input);
	input.select();
	input.setSelectionRange(0, input.value.length), document.execCommand('Copy');
	document.body.removeChild(input);
}

//**********复制文本到剪切板 - js兼容安卓和IOS的 start**********









//**********控制html或jsp页面乱码 加载css start**********

	<meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
	
// favicon.ico图标位置 加载css start	
	<link rel="icon" href="favicon.ico">
	
//**********控制html或jsp页面乱码 加载css end**********
	
	
	
	
	



//**********JS数组去重  start**********

	1、JS数组去重
	function unique(arr) {
		var result = [], hash = {};
		for (var i = 0, elem; (elem = arr[i]) != null; i++) {
			if (!hash[elem]) {
				result.push(elem);
				hash[elem] = true;
			}
		}
		return result;
	}
	
	2、利用 Object.keys() 方法枚举 && 对象不能有相同的属性方法 
	function unique(arr){
		var tempKey = {};
		for(var i=0; i<arr.length; i++){
			tempKey[arr[i]] = 0;
		}
		return Object.keys(tempKey)；
	}


//**********JS数组去重  end**********











//********** Throw 声明  start**********

	var x=prompt("请输入 0 至 10 之间的数：","")
	try
	{ 
		if(x>10) 
		  throw "Err1" 
		else if(x<0)
		  throw "Err2"
		else if(isNaN(x))
		  throw "Err3"
	} 
	catch(er)
	{
		if(er=="Err1") 
		  alert("错误！该值太大！")
		if(er == "Err2") 
		  alert("错误！该值太小！") 
		if(er == "Err3") 
		  alert("错误！该值不是数字！") 
	}

//********** Throw 声明  start**********







// 

uploadWd480 
 <el-divider></el-divider>











