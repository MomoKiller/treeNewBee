


|=========================================================================================================|
|																										  |
|																										  |
|																										  |
|																										  |
|===============================  					完整开发用例	   	   ===============================|
|																										  |
|																										  |
|																										  |
|																										  |
|=========================================================================================================|







// promise
let ap = new Promise((resolve, reject)=>{
	if(true){
		resolve('成功参数');
	}else{
		reject('失败参数');
	}
});

ap.then((suc)=>{	// 成功的回调
	console.log(suc);
},(err)=>{			// 失败的回调

});




// String 类型，原型链扩展 substitute 方法。六九有栗子
(function($) {
	if (!$) return;
	$.extend(String.prototype, {
		// 举个栗子： 拓展substitute方法
		substitute: function(data) {
			if (data && typeof(data) == 'object') {
				return this.replace(/\{([^{}]+)\}/g, function(match, key) {
					var value = data[key];
					return (value !== undefined) ? '' + value: '';
				});
			} else {
				return this.toString();
			}
		},
	});
})(jQuery);


substitute() 方法加载表格
1、新建页面模板
var trTpl       =  '<tr>'
	+ '<td>{listId}</td>'
	+ '<td>{listNumber}</td>'
	+ '<td>{listName}</td>'
	+ '<td>{boxSell}</td>'
	+ '<td>{minPrice}</td>'
	+ '<td>{storeName}</td>'
	+ '<td>{listingState}</td>'
	+ '<td>{storage}</td>'
	+ '</tr>';
2、新建数据模板
var trArr   = {
	'listId':       data[i].listId,
	'listNumber':   data[i].listNumber,
	'listName':     data[i].listName,
	'boxSell':      $boxSell[data[i].boxSell],
	'minPrice':     data[i].minPrice,
	'storeName':    data[i].storeName,
	'listingState': $listState[data[i].listingState],
	'storage':      data[i].storage
};
3、页面模板加载数据模板---用subsititute替换页面模板中的数据
$.each(data, function (i) {
	var trArr   = {
		'listId':       data[i].listId,
		'listNumber':   data[i].listNumber,
		'listName':     data[i].listName,
		'boxSell':      $boxSell[data[i].boxSell],
		'minPrice':     data[i].minPrice,
		'storeName':    data[i].storeName,
		'listingState': $listState[data[i].listingState],
		'storage':      data[i].storage
	};
	hisHtml     += trTpl.substitute(trArr);
});
//---------hisHtml---为最终的页面元素






// 当前页报表导出
reportExport(){
	let rData = this.dataSource;
	if(!rData || JSON.stringify(rData) == '[]'){
		return;
	}
	let jsonData = [];  //要导出的json数据
	let tempJson = {};
	for(let i=0; i< rData.length; i++){
		tempJson = {};
		tempJson['externalTransId'] = rData[i].externalTransId != null ? rData[i].externalTransId : '';
		tempJson['bankMerchantName'] = rData[i].bankMerchantName != null ? rData[i].bankMerchantName : '';
		tempJson['userName'] = rData[i].userName != null ? rData[i].userName : '';
		tempJson['toCardName'] = rData[i].toCardName != null ?  rData[i].toCardName : '';
		tempJson['orderMoney'] = rData[i].orderMoney != null ? rData[i].orderMoney : '';
		jsonData.push(tempJson);
	}
	
	//列标题
	let str = '<tr>'+
		'<td>商户流水号</td>' +
		'<td>商户名称</td>' +
		'<td>用户名</td>' +
		'<td>持卡人姓名</td>' +
	'</tr>';

	//循环遍历，每行加入tr标签，每个单元格加td标签
	for(let i = 0 ; i < jsonData.length ; i++ ){
		str+='<tr>';
		for(let item in jsonData[i]){
			//增加\t为了不让表格显示科学计数法或者其他格式
			str+=`<td>${ jsonData[i][item] + '\t'}</td>`;     
		}
		str+='</tr>';
	}
	//Worksheet名
	let worksheet = 'Sheet1'
	let url = 'data:application/vnd.ms-excel;base64,';

	//下载的表格模板数据
	let template = `<html xmlns:o="urn:schemas-microsoft-com:office:office" 
	xmlns:x="urn:schemas-microsoft-com:office:excel" 
	xmlns="http://www.w3.org/TR/REC-html40">
	<head><!--[if gte mso 9]><xml><x:ExcelWorkbook><x:ExcelWorksheets><x:ExcelWorksheet>
	<x:Name>${worksheet}</x:Name>
	<x:WorksheetOptions><x:DisplayGridlines/></x:WorksheetOptions></x:ExcelWorksheet>
	</x:ExcelWorksheets></x:ExcelWorkbook></xml><![endif]-->
	</head><body><table>${str}</table></body></html>`;
	//下载模板
	// window.location.href = url + this.base64(template);

	let link = document.createElement("a");
	link.href = url + this.base64(template);
	link.download =  "流水查询报表.xls";
	document.body.appendChild(link);
	link.click();
	document.body.removeChild(link);
}













// 吸顶效果实现
HTML:
	<div id="searchBar" :class="searchBarFixed== true?'isFixed':''">
JS: 
	mounted () {
	   window.addEventListener('scroll', this.handleScroll);
	},
	destroyed(){
		window.removeEventListener('scroll', this.handleScroll);
	},
	methods: {
		handleScroll () {  
			this.$nextTick(() => {
				let scrollTop = document.documentElement.scrollTop || document.body.scrollTop;  
				let offsetTop = document.getElementById('searchBar').offsetTop;
				if (scrollTop > offsetTop) {
					this.searchBarFixed = true;
				} else {
					this.searchBarFixed = false;
				}
			})
		}
	}

CSS: 
	.isFixed{
	  position:fixed;
	  top:0;
	  left:0;
	  width:100%;
	  z-index:999;
	}



十一、	页面跳转的方法
1、通用的页面跳转方法，一般以根目录为起始目录
	window.location.href = urls;
2、写在html中的页面跳转方法	，一般以当前目录为起始目录：
	HTML:
		<iframe id="iframeID" style="display:none;"></iframe><!-- 此iframe无其它用途，一般设置隐藏-->
	JS: 
		document.getElementById("iframeID").src =urls;	
3、<a>标签中的src属性中直接写入路径。可以点击文字直接跳转到相应的页面
	HTML: 
		<a href="jsp/selfservice/self_service_operate.jsp" title="点击进入业务报告查询">
4、在a标签中通过click方法跳转到相应的页面
	HTML: 
		<a href="javascript:void(0)" class="icon-gear" onclick="functionTZ()" title="点击进行配置"></a>	
	JS:
		function functionTZ(){
			window.location.href = urls;		
		}
5、<iframe>标签中的src属性中直接写入路径，当打开当前页面的iframe中的页面也会随之加载出来。
	HTML: 
		<iframe src="sys_index.jsp" scrolling="auto" name="rightFrame" id="rightFrame" style="bottom:0px; width:100%;height: 100%;" title="rightFrame"/>
6、a标签 target 属性跳转至本页面 name 标记处
	HTML: 
		<a href="jsp/userManage.jsp" target="rightFrameMenu">用户管理</a>
7、window.open(url, '_blank');





二一、图片滚动的案例
HTML: 
	<html>
	<body>
	<style>
		div { font-size:12px; }
	</style>
	<div id="mq" style="width:100%;height:70px;overflow:hidden;border:1px solid #000000" onmouseover="iScrollAmount=0" onmouseout="iScrollAmount=1">
		李新成<br/>
		褚喜凡<br/>
		董里旭<br/>
		张丽君<br/>
		杜志芳<br/>
		李国玉<br/>
	</div>
	<script>
		var oMarquee = document.getElementById("mq"); //滚动对象
		var iLineHeight = 14; //单行高度，像素
		var iLineCount = 6; //实际行数
		var iScrollAmount = 1; //每次滚动高度，像素
		function run() {
			oMarquee.scrollTop += iScrollAmount;
			if ( oMarquee.scrollTop == iLineCount * iLineHeight )
				oMarquee.scrollTop = 0;
			if ( oMarquee.scrollTop % iLineHeight == 0 ) {
				window.setTimeout( "run()", 2000 );
			} else {
				window.setTimeout( "run()", 50 );
			}
		}
		oMarquee.innerHTML += oMarquee.innerHTML;
		window.setTimeout( "run()", 2000 );
	</script>
	</body>
	</html>





// H5 标准头部尾部
<!DOCTYPE html>
<!-- 声明文档语言属性 -->
<!-- 中文 -->
<html lang="zh-Hans">
<!-- 简体中文 -->
<html lang="zh-cmn-Hans">
<!-- 繁体中文 -->
<html lang="zh-cmn-Hant">
<!-- 英文 -->
<html lang="en">
<head>
<!-- 指明字符编码，此编码必须是head的第一个直接元素（紧跟在head元素下） -->
<meta charset="utf-8">
<!-- IE兼容模式处理，以下代码表明优先使用最新版本IE和Chrome内核 -->
<meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
<!-- 采用极速模式访问-->
<meta name="renderer" content="webkit" >
<!-- SEO标签是必须的 -->
<title>这是网页标题</title>
<meta name="keywords" content="这是网页关键词">
<meta name="description" content="这是页面描述">
<!-- 声明作者信息 -->
<meta name="author" content="作者姓名,EMAIL,联系地址">
<!-- 指明网页的小图标，多数浏览器会请求web server目录下的favico.ico文件，为了避免404,建议设置 -->
<!-- 或者将该图片置于网站根目录，命名为：favicon.ico -->
<link rel="shortcut.icon" href="path/to/favicon.ico">
<!-- 以下是移动设备 -->
<!-- 视图模式1：1，且禁止放大，缩小 -->
<meta name="viewport" content="width=device-width,initial-scale=1.0,maximum-scale=1.0,user-scalable=no" />
<script src="https://cdn.bootcss.com/html5shiv/r29/html5.min.js"></script> <!-- 让 IE 识别并支持 HTML5 元素。 -->
<!-- IOS图标 -->
<link rel="apple-touch-icon-precomposed" href="图标路径">
</head>








//图片转 base64 方法


let imgSrc = "https://www.baidu.com/img/PCtm_d9c8750bed0b3c7d089fa7d55720d6cf.png";


/**
 * xhr请求图片,并设置返回的文件类型为Blob对象
 * FileReader 对象接收blob
 */
function getBase64(imgUrl) {
  window.URL = window.URL || window.webkitURL;
  var xhr = new XMLHttpRequest();
  xhr.open("get", imgUrl, true);
  xhr.responseType = "blob";
  xhr.onload = function () {
    if (this.status == 200) {
      var blob = this.response;                 //得到一个blob对象
      console.log("blob", blob)
      let oFileReader = new FileReader();
      oFileReader.onloadend = function (e) {
        let base64 = e.target.result;
        console.log("[base64对象]", base64);
      };
      oFileReader.readAsDataURL(blob);

    }
  }
  xhr.send();
}

getBase64(imgSrc);
	
	

/**
 * canvas.toDataURL()
 *
 */
function getBase64Image(img, width, height) {
  var canvas = document.createElement("canvas");
  canvas.width = width ? width : img.width;
  canvas.height = height ? height : img.height;
  var ctx = canvas.getContext("2d");
  ctx.drawImage(img, 0, 0, canvas.width, canvas.height);
  var dataURL = canvas.toDataURL();
  return dataURL;
}

function getCanvasBase64(img) {
	var image = new Image();
	image.crossOrigin = '';
	image.src = img;
	image.onload = function () {
		console.log("[base64对象]", getBase64Image(image));
	}
}

getCanvasBase64(imgSrc);





jq 文件上传

var fileCard = $('.file_img input')[2];
	fileCard.onchange = function() {
		var f = this.files[0];
		var fileMaxsize = 1024*1024*4;
		if(f.size > fileMaxsize){
			$.toast('身份证照片不可大于4M','text');
			return false;
		}

		let config = {
			headers: {
				"Content-Type": "multipart/form-data"
			}
		};                                                                              
		let formData = new FormData();
		formData.append("file", f);
		$.ajax({
			method: 'POST',
			url: '/upload/ajax_uploadfile',
			data: formData,
			contentType: false,
			processData: false,
			success: function(res) {
				console.log(res)
				$('.card_img').attr('src',res.filepath).css({'z-index':9,'width':'2rem','height':'2rem'})
				$('input[name="card_img"]').val(res.filepath)
			}
 		})
	}











