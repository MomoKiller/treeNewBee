


















// JS原型对象
https://www.cnblogs.com/chuanq/p/11016509.html
// JS中的作用域和作用域链
https://www.cnblogs.com/leftJS/p/11067908.html
// webpack打包原理 
https://segmentfault.com/a/1190000021494964?utm_source=tag-newest
// H5 打包
https://www.cnblogs.com/navysummer/p/9390661.html
// We - 开源镜像站
http://mirrors.neusoft.edu.cn/
// 语句和表达式
https://www.cnblogs.com/qlqwjy/p/7660590.html
// Object.defineProperty  
https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty
// Dreader -  three.js 开发的H5 游戏
https://gamasexual.com/c/f/g/dreader/
// 关于js的继承
https://juejin.im/post/5ccff45a51882541b07a9e3d
// 单页面应用
https://www.cnblogs.com/zion0707/p/5204161.html
// 关于正则表达式的使用方法：
http://www.cnblogs.com/jiuban2391/p/6061542.html  
// 网页自适应宽度设计
http://www.ruanyifeng.com/blog/2012/05/responsive_web_design.html
spring+springMVC+myBatis 样例
http://ju.outofmemory.cn/entry/100681
鼠标监听事件
http://www.cnblogs.com/rubylouvre/archive/2009/08/24/1552862.html   				
// 关于js的继承
https://juejin.im/post/5ccff45a51882541b07a9e3d




// promise 使用栗子


/**************** 栗子start *********************/
var Pro = function (time) {
	//返回一个Promise对象
	return new Promise(function (resolve, reject) {
		console.log('123');
		//模拟接口调用
		setTimeout(function () {
			//这里告诉Promise 成功了，然后去执行then方法的第一个函数
			resolve('成功返回');
		}, time);
	})
};
(function(){
	console.log('start');
	Pro(3000)
	.then(function(data){
		console.log(data);
		return Pro(5000);})
	.then(function(data){
		console.log(data);
		console.log('end');
	})
})();
/**************** 栗子end *********************/


/**************** 栗子start *********************/
var Pro = function () {
	//返回一个Promise对象
	return new Promise(function (resolve, reject) {
		//模拟接口调用
		setTimeout(function () {
			resolve(true);
		}, 1000);
	})
};
var Pro2 = function () {
	//返回一个Promise对象
	return new Promise(function (resolve, reject) {
		//模拟接口调用
		setTimeout(function () {
			resolve('Pro2成功执行');
		}, 1000);
	})
};

Pro().then(function(data){
	var val = data;
	console.log(val)
	if (val) {
		console.log(1111)
		return Pro2()
	}
	
}).then(function(data1){
	console.log(data1)
})
/**************** 栗子end *********************/





/**************** 栗子start *********************/
let p1 =new Promise(function(resolve,reject){
	resolve(1);
});
let p2 = new Promise(function(resolve,reject){
	resolve(2);
});
let p3 = new Promise(function(resolve,reject){
	resolve(3);
});
Promise.all([p1, p2, p3]).then(function (results) {
	console.log('success:'+results);
}).catch(function(r){
	console.log("error");
	console.log(r);
});
/**************** 栗子end *********************/




new Promise(function(resolve, reject){
	setTimeout(function(){
		resolve("ok");
	}, 1000)
}).then(function(res){
	console.log(res)
});



/*********** 加载图片栗子 start ******************/ 
let url1 = "https://ss0.bdstatic.com/70cFvHSh_Q1YnxGkpoWK1HF6hhy/it/u=3293635140,3955114282&fm=26&gp=0.jpg"
let url2 = "https://ss0.bdstatic.com/70cFuHSh_Q1YnxGkpoWK1HF6hhy/it/u=1019333328,1858047370&fm=26&gp=0.jpg"
let url3 = "https://ss1.bdstatic.com/70cFvXSh_Q1YnxGkpoWK1HF6hhy/it/u=4226468334,723383513&fm=26&gp=0.jpg"

let oImg1 = new Image()
oImg1.onload = function() {
	console.log('img1加载完毕')
	let oImg2 = new Image()
	oImg2.onload = function() {
		console.log('img2加载完毕')
		let oImg3 = new Image()
		oImg3.onload = function() {
			console.log('img3加载完毕')
			console.log('全部加载完毕')
		}
		oImg3.src = url3
	}
	oImg2.src = url2
}
oImg1.src = url1

// Promise
function loadImg(url) {
	let img = new Image()
	img.src = url
	return new Promise((resolve, reject) => {
		img.onload = () => {
			console.log(url)
			resolve()
		}
		img.onerror = (e) => {
			reject(e)
		}
	})
}


loadImg(url1).then(() => {
	return loadImg(url2)
}).then(() => {
	return loadImg(url3)
})
/*********** 加载图片栗子 end ******************/ 





/*********** GULP 打包使用 ******************/ 
https://www.cnblogs.com/flyingzeng/p/10536690.html


// 前端工程化指南
https://www.kancloud.cn/csnikey/fepro-guide/334544








